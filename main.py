import os
import cv2
import numpy as np
import fitz
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext
import asyncio
import logging
import tempfile
import shutil
from collections import defaultdict

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Form(StatesGroup):
    waiting_for_pdf = State()

API_TOKEN = '7611578010:AAHt2uEA-nHSCcxqFebhyzCsvhqzHZr84tM'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
@dp.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF —Ñ–∞–π–ª–æ–≤.\n\n"
        "üìù –ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å PDF —Ñ–∞–π–ª—ã\n"
        "‚Ä¢ –£–¥–∞–ª—è—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n\n"
        "üöÄ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF —Ñ–∞–π–ª, –∏ —è –Ω–∞—á–Ω—É –æ–±—Ä–∞–±–æ—Ç–∫—É!\n\n"
        "‚ö†Ô∏è –í–∞–∂–Ω–æ: —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20MB"
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await message.reply(welcome_text)
    await state.set_state(Form.waiting_for_pdf)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
user_stats = defaultdict(lambda: {"username": None, "usage_count": 0})

def safe_remove(file_path):
    try:
        if os.path.exists(file_path):
            os.chmod(file_path, 0o777)  # –î–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∞ –Ω–∞ —Ñ–∞–π–ª
            os.remove(file_path)
    except Exception as e:
        logger.error(f"Failed to remove temporary file {file_path}: {e}")

class ImageProcessor:
    def __init__(self):
        self.template_paths = [
            'test3.png',
            'test.png'
        ]
        self.logger = logging.getLogger(__name__)

    def process_image(self, image):
        self.logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        processed_image = image.copy()

        for template_path in self.template_paths:
            processed_image = self.find_and_process_image(template_path, processed_image)

        self.logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return processed_image

    def find_and_process_image(self, template_path, image):
        try:
            small_image = cv2.imread(template_path)
            if small_image is None:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω: {template_path}")
                return image

            large_h, large_w = image.shape[:2]
            small_h, small_w = small_image.shape[:2]

            if small_h > large_h or small_w > large_w:
                scale = min(large_h/small_h, large_w/small_w) * 0.9
                new_width = int(small_w * scale)
                new_height = int(small_h * scale)
                small_image = cv2.resize(small_image, (new_width, new_height))
                self.logger.info(f"–®–∞–±–ª–æ–Ω –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω –¥–æ {new_width}x{new_height}")

            h, w = small_image.shape[:2]
            result = cv2.matchTemplate(image, small_image, cv2.TM_CCOEFF_NORMED)
            threshold = 0.8
            yloc, xloc = np.where(result >= threshold)

            if len(xloc) > 0:
                self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(xloc)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏")
                
                mask = np.zeros(image.shape[:2], dtype=np.uint8)
                
                for (x, y) in zip(xloc, yloc):
                    y_start = max(y - 1, 0)
                    y_end = min(y + h + 1, large_h)
                    x_start = max(x - 1, 0)
                    x_end = min(x + w + 1, large_w)
                    mask[y_start:y_end, x_start:x_end] = 255

                processed = cv2.inpaint(image, mask, 3, cv2.INPAINT_TELEA)
                return processed
            return image
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞–±–ª–æ–Ω–∞ {template_path}: {str(e)}")
            return image

image_processor = ImageProcessor()

def process_pdf(input_path, output_path):
    temp_files = []
    try:
        doc_in = fitz.open(input_path)
        doc_out = fitz.open()
        
        for page in doc_in:
            pix = page.get_pixmap()
            img = np.frombuffer(pix.samples, dtype=np.uint8).reshape(
                pix.height, pix.width, pix.n)
            
            processed = image_processor.process_image(img)
            
            temp_img_path = tempfile.mktemp(suffix='.png')
            temp_files.append(temp_img_path)
            cv2.imwrite(temp_img_path, cv2.cvtColor(processed, cv2.COLOR_BGR2RGB))
            
            new_page = doc_out.new_page(width=page.rect.width,
                                      height=page.rect.height)
            new_page.insert_image(new_page.rect, filename=temp_img_path)
        
        doc_out.save(output_path)
        doc_in.close()
        doc_out.close()
        return True
        
    except Exception as e:
        logger.error(f"Error in process_pdf: {e}")
        return False
    finally:
        for temp_file in temp_files:
            try:
                if os.path.exists(temp_file):
                    os.remove(temp_file)
            except Exception as e:
                logger.error(f"Failed to remove temporary file {temp_file}: {e}")

MAX_FILE_SIZE = 10 * 1024 * 1024  # 10 MB
MAX_CONCURRENT_PROCESSING = 3
processing_semaphore = asyncio.Semaphore(MAX_CONCURRENT_PROCESSING)

@dp.message(F.document)
async def handle_document(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    user_stats[user_id]["username"] = username
    user_stats[user_id]["usage_count"] += 1
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    status_message = await message.reply("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞... ‚è≥")
    
    input_pdf_path = f'input_{user_id}.pdf'
    output_pdf_path = f'output_{user_id}.pdf'
    
    try:
        if not message.document.file_name.lower().endswith('.pdf'):
            await status_message.edit_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
            return

        await status_message.edit_text("üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
        
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        await bot.download_file(file.file_path, input_pdf_path)
        
        await status_message.edit_text("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω\n‚öôÔ∏è –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        with fitz.open(input_pdf_path) as doc, fitz.open() as output_doc:
            total_pages = len(doc)
            await status_message.edit_text(f"üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 1/{total_pages}")
            
            for page_num, page in enumerate(doc):
                if page_num % 2 == 0 or page_num == total_pages - 1:
                    progress = "üî∏" * ((page_num + 1) // (total_pages // 5 + 1)) + "‚≠ï" * (5 - (page_num + 1) // (total_pages // 5 + 1))
                    await status_message.edit_text(
                        f"üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}\n"
                        f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1}/{total_pages}\n"
                        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}\n"
                        f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
                    )
                
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                pix = page.get_pixmap()
                img = np.frombuffer(pix.samples, dtype=np.uint8).reshape(pix.height, pix.width, pix.n)
                processed_img = image_processor.process_image(img)
                
                img_rgb = cv2.cvtColor(processed_img, cv2.COLOR_BGR2RGB)
                temp_png_path = f'temp_{user_id}_{page_num}.png'
                cv2.imwrite(temp_png_path, img_rgb)
                
                try:
                    new_page = output_doc.new_page(width=page.rect.width, height=page.rect.height)
                    new_page.insert_image(new_page.rect, filename=temp_png_path)
                finally:
                    if os.path.exists(temp_png_path):
                        os.remove(temp_png_path)

            await status_message.edit_text("üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
            output_doc.save(output_pdf_path)

        await status_message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª...")
        doc_to_send = FSInputFile(output_pdf_path)
        await message.reply_document(
            doc_to_send,
            caption="‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π PDF —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
        )
        await status_message.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ!")

    except Exception as e:
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:\n{str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        await status_message.edit_text(error_message)
    finally:
        for file_path in [input_pdf_path, output_pdf_path]:
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
                    logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")

        await state.clear()
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

@dp.message(Command("admin"))
async def admin_command(message: Message):
    if message.from_user.id == 1419048544:  # Replace with your admin ID
        user_count = len(user_stats)
        usage_counts = [user["usage_count"] for user in user_stats.values()]
        max_usage_count = max(usage_counts) if usage_counts else 0
        min_usage_count = min(usage_counts) if usage_counts else 0
        avg_usage_count = sum(usage_counts) / len(usage_counts) if usage_counts else 0
        
        admin_message = (
            f"–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {max_usage_count}\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {min_usage_count}\n"
            f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {avg_usage_count:.2f}\n"
            f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        )
        
        for user_id, user in user_stats.items():
            admin_message += f"  - {user['username']} (ID: {user_id}): {user['usage_count']} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"
        
        await message.reply(admin_message)
    else:
        await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

temp_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'temp')
os.makedirs(temp_dir, exist_ok=True)
tempfile.tempdir = temp_dir

async def main():
    logger.info("Bot started")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
